import kotlin.Unit

buildscript {
//    buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
    ext {
        scalaVersion = '2.12.2'
    }
    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
    }
}

plugins {
    id 'java'
    id 'scala'
//    id: "groovy"
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
}
apply plugin: "groovy"

group 'com.perkins'
version '1.0-SNAPSHOT'


repositories {
    mavenLocal()
    maven { url 'http://maven.oschina.net/content/groups/public/' }
    mavenCentral()
}

def versions = [
        ScalaBinary: "2.12"
]

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    compile "org.scala-lang:scala-library:$scalaVersion"
    compile "org.scala-lang:scala-compiler:$scalaVersion"
    compile "org.scala-lang:scala-reflect:$scalaVersion"

    //groovy
    compile gradleApi()
    compile localGroovy()


    // https://mvnrepository.com/artifact/org.scalatest/scalatest
    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version: '3.2.0-SNAP10'

    // https://mvnrepository.com/artifact/junit/junit
    compile group: 'junit', name: 'junit', version: '4.13.2'

//     akka
    compile platform("com.typesafe.akka:akka-bom_${versions.ScalaBinary}:2.6.14")
    compile "com.typesafe.akka:akka-stream_${versions.ScalaBinary}"
    //scalaz 注意 7.3.3只能用2.12的scala,否则报找不到 scala.Serializable
    compile 'org.scalaz:scalaz-core_2.12:7.3.3'

}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala']
        }
        kotlin {
            srcDirs = ['src/main/kotlin']
        }
        java {
            srcDirs = ['src/main/java']
        }
        groovy {
            srcDirs = ['src/main/groovy']
        }
    }

    test {
        scala {
            srcDirs = ['src/test/scala']
        }
        java {
            srcDirs = ['src/test/java']
        }
        kotlin {
            srcDirs = ['src/test/kotlin']
        }
        groovy {
            srcDirs = ['src/test/groovy']
        }
    }
}


test {
    useJUnitPlatform()
}

task showFile {
    sourceSets.all { set ->
        println "${set.name}的文件是 ${set.java.srcDirs}"
    }
}

// 定义并配置myTask
task myTask {
    println "config myTask"
}

myTask.doLast {
    println "after execute myTask"
}

myTask.doFirst {
    println "before execute myTask"
}
task count {
    4.times {
        print(it)
    }
}
task hello {

    List<String> strs = Arrays.asList("aa", "bb");
    for (String str : strs) {
        System.out.println(str);
    }
    Map<Integer, String> map = new HashMap<>();
    map.put(1, "a");
    map.put(3, "b");
    for (Integer key : map.keySet()) {
        System.out.println("key:" + key);
        println 'value:' + map.get(key)
    }
    println 'hello world'

}
task kotlinTask {

}

task hello2 {
    description 'this is hello2'
    doLast {
        println 'hello'
    }
}

//会先执行hello2,之后再执行worl方法
task world(dependsOn: hello2) {
    doLast {
        println 'world'
    }
}

class RygTask extends DefaultTask {
    String message = 'This is RygTask'

    // @TaskAction 表示该Task要执行的动作,即在调用该Task时，hello()方法将被执行
    @TaskAction
    def hello() {
        println "Hello world. $message"
    }
}

// hello使用了默认的message值
task helloRygTask(type: RygTask)

// 重新设置了message的值
task hello1(type: RygTask) {
    message = "I am an android developer"
}

task myTask1 {
    println "execute myTask1"
}

task myTask2 {
    println "execute myTask2"
}

// 定义一个名字为rygTask的task，属于renyugang分组，并且依赖myTask1和myTask2两个task。
project.task('rygTask', group: "renyugang", description: "我自己的Task", dependsOn: ["myTask1", "myTask2"]).doLast {
    println "execute rygTask"
}
